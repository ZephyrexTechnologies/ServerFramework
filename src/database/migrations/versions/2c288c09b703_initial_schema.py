"""initial schema

Revision ID: 2c288c09b703
Revises:
Create Date: 2025-05-02 10:26:50.936207

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "2c288c09b703"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "extensions",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        comment="An Extension represents a third-party integration. This is SEPARATE from an oauth link.",
    )
    op.create_table(
        "providers",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("friendly_name", sa.Text(), nullable=True),
        sa.Column("agent_settings_json", sa.Text(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        comment="A Provider represents an external provder of data or functionality. It represents an extension provider. Settings should exclude model name and api key, as those are stored in provider instance as fields.",
    )
    op.create_table(
        "teams",
        sa.Column(
            "name", sa.String(), nullable=False, comment="Human-readable team name"
        ),
        sa.Column(
            "description",
            sa.String(),
            nullable=True,
            comment="Description of the team's purpose",
        ),
        sa.Column(
            "encryption_key",
            sa.String(),
            nullable=False,
            comment="Encryption key for team resources",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("parent_id", sa.String(), nullable=True),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["teams.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Teams to which users can belong",
    )
    with op.batch_alter_table("teams", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_teams_parent_id"), ["parent_id"], unique=False
        )

    op.create_table(
        "users",
        sa.Column(
            "email",
            sa.String(),
            nullable=True,
            comment="User's email address used for login and communications",
        ),
        sa.Column(
            "username",
            sa.String(),
            nullable=True,
            comment="Optional username that can be used for login instead of email",
        ),
        sa.Column(
            "display_name",
            sa.String(),
            nullable=True,
            comment="User's preferred display name shown in the interface",
        ),
        sa.Column(
            "first_name", sa.String(), nullable=True, comment="User's first/given name"
        ),
        sa.Column(
            "last_name", sa.String(), nullable=True, comment="User's last/family name"
        ),
        sa.Column(
            "mfa_count",
            sa.Integer(),
            nullable=True,
            comment="Number of MFA methods required for authentication",
        ),
        sa.Column(
            "active",
            sa.Boolean(),
            nullable=True,
            comment="Whether this user account is active and allowed to log in",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("image_url", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
        comment="Core user accounts for authentication and identity management",
    )
    op.create_table(
        "abilities",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("extension_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["extension_id"], ["extensions.id"], name="fk_ability_extensions_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="An Ability represents something an extension can do.",
    )
    op.create_table(
        "auth_sessions",
        sa.Column(
            "session_key",
            sa.String(),
            nullable=False,
            comment="Unique session identifier used in JWT jti claim",
        ),
        sa.Column(
            "jwt_issued_at",
            sa.DateTime(),
            nullable=False,
            comment="When the JWT was issued",
        ),
        sa.Column(
            "refresh_token_hash",
            sa.String(),
            nullable=True,
            comment="Hash of refresh token if refresh mechanism is enabled",
        ),
        sa.Column(
            "device_type",
            sa.String(),
            nullable=True,
            comment="Type of device used for authentication (mobile, desktop, etc.)",
        ),
        sa.Column(
            "device_name",
            sa.String(),
            nullable=True,
            comment="Name of the device if provided",
        ),
        sa.Column(
            "browser",
            sa.String(),
            nullable=True,
            comment="Browser information from user agent",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=True,
            comment="Whether this session is currently active",
        ),
        sa.Column(
            "last_activity",
            sa.DateTime(),
            nullable=False,
            comment="Timestamp of last activity in this session",
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(),
            nullable=False,
            comment="When this session expires",
        ),
        sa.Column(
            "revoked",
            sa.Boolean(),
            nullable=True,
            comment="Whether this session has been explicitly revoked",
        ),
        sa.Column(
            "trust_score",
            sa.Integer(),
            nullable=True,
            comment="Trust level of this session (0-100)",
        ),
        sa.Column(
            "requires_verification",
            sa.Boolean(),
            nullable=True,
            comment="Whether additional verification is required",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_authsession_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("session_key"),
        comment="Active user authentication sessions and related metadata",
    )
    op.create_table(
        "failed_login_attempts",
        sa.Column(
            "ip_address",
            sa.String(),
            nullable=True,
            comment="IP address from which the failed login attempt originated",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_failedloginattempt_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Records of failed login attempts for security monitoring and lockout enforcement",
    )
    op.create_table(
        "provider_extensions",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("provider_id", sa.String(), nullable=False),
        sa.Column("extension_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["extension_id"],
            ["extensions.id"],
            name="fk_providerextension_extensions_id",
        ),
        sa.ForeignKeyConstraint(
            ["provider_id"], ["providers.id"], name="fk_providerextension_providers_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="A ProviderExtension represents Provider support for an Extension.",
    )
    op.create_table(
        "provider_instances",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("model_name", sa.Text(), nullable=True),
        sa.Column("api_key", sa.Text(), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.Column("team_id", sa.String(), nullable=True),
        sa.Column("provider_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["provider_id"], ["providers.id"], name="fk_providerinstance_providers_id"
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name="fk_providerinstance_teams_id"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_providerinstance_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="A ProviderInstance represents a User or Team's instance of a Provider. They can have multiple of the same Provider.",
    )
    op.create_table(
        "roles",
        sa.Column(
            "name", sa.String(), nullable=False, comment="Unique role identifier/code"
        ),
        sa.Column(
            "friendly_name",
            sa.String(),
            nullable=True,
            comment="Human-readable display name for the role",
        ),
        sa.Column(
            "mfa_count",
            sa.Integer(),
            nullable=True,
            comment="Minimum number of MFA verifications required for this role",
        ),
        sa.Column(
            "password_change_frequency_days",
            sa.Integer(),
            nullable=True,
            comment="How often users with this role must change their password",
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(),
            nullable=True,
            comment="The expiration time of the role",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("team_id", sa.String(), nullable=True),
        sa.Column("parent_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], name="fk_role_teams_id"),
        sa.PrimaryKeyConstraint("id"),
        comment="Permission roles that define what actions users can perform",
    )
    with op.batch_alter_table("roles", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_roles_parent_id"), ["parent_id"], unique=False
        )

    op.create_table(
        "rotations",
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.Column("team_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], name="fk_rotation_teams_id"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="fk_rotation_users_id"),
        sa.PrimaryKeyConstraint("id"),
        comment="A Rotation represents a collection of Providers to be used by one or more Agents. All Agents interface with Providers through a Rotation.",
    )
    op.create_table(
        "team_metadata",
        sa.Column("key", sa.String(), nullable=False, comment="Metadata key name"),
        sa.Column("value", sa.String(), nullable=True, comment="Metadata value"),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("team_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name="fk_teammetadata_teams_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Key-value pairs storing custom metadata for teams",
    )
    op.create_table(
        "user_credentials",
        sa.Column(
            "password_hash",
            sa.String(),
            nullable=True,
            comment="Bcrypt hash of the user's password",
        ),
        sa.Column(
            "password_salt",
            sa.String(),
            nullable=True,
            comment="Salt used for password hashing",
        ),
        sa.Column(
            "password_changed",
            sa.DateTime(),
            nullable=True,
            comment="When this password was changed; null indicates current password",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_usercredential_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Stores user password hashes and tracks password change history",
    )
    op.create_table(
        "user_metadata",
        sa.Column("key", sa.String(), nullable=False, comment="Metadata key name"),
        sa.Column("value", sa.String(), nullable=True, comment="Metadata value"),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_usermetadata_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Key-value pairs storing custom metadata for users",
    )
    op.create_table(
        "user_recovery_questions",
        sa.Column(
            "question", sa.String(), nullable=False, comment="Security question text"
        ),
        sa.Column(
            "answer",
            sa.String(),
            nullable=False,
            comment="Hashed answer to the security question",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_userrecoveryquestion_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Security questions for account recovery when a user forgets their password",
    )
    op.create_table(
        "invitations",
        sa.Column(
            "code",
            sa.String(),
            nullable=True,
            comment="Invitation code for public sharing; null for direct invitations",
        ),
        sa.Column(
            "max_uses",
            sa.Integer(),
            nullable=True,
            comment="Maximum number of times this invitation can be used; null for unlimited",
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(),
            nullable=True,
            comment="When this invitation expires; null for no expiry",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("team_id", sa.String(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name="fk_invitation_roles_id"
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name="fk_invitation_teams_id"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_invitation_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Invitations to join teams, can be direct or via invitation code",
    )
    op.create_table(
        "permissions",
        sa.Column(
            "resource_type",
            sa.String(),
            nullable=False,
            comment="Type of resource being granted permissions for",
        ),
        sa.Column(
            "resource_id",
            sa.String(),
            nullable=False,
            comment="ID of the specific resource",
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(),
            nullable=True,
            comment="The expiration time of the permission",
        ),
        sa.Column(
            "can_view",
            sa.Boolean(),
            nullable=True,
            comment="Permission to view the resource",
        ),
        sa.Column(
            "can_execute",
            sa.Boolean(),
            nullable=True,
            comment="Permission to execute or run the resource",
        ),
        sa.Column(
            "can_copy",
            sa.Boolean(),
            nullable=True,
            comment="Permission to duplicate the resource",
        ),
        sa.Column(
            "can_edit",
            sa.Boolean(),
            nullable=True,
            comment="Permission to modify the resource",
        ),
        sa.Column(
            "can_delete",
            sa.Boolean(),
            nullable=True,
            comment="Permission to delete the resource",
        ),
        sa.Column(
            "can_share",
            sa.Boolean(),
            nullable=True,
            comment="Permission to share the resource with others",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.Column("team_id", sa.String(), nullable=True),
        sa.Column("role_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name="fk_permission_roles_id"
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name="fk_permission_teams_id"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_permission_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Fine-grained permissions for specific resources and actions",
    )
    op.create_table(
        "provider_extension_abilities",
        sa.Column("provider_extension_id", sa.String(), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("ability_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ability_id"],
            ["abilities.id"],
            name="fk_providerextensionability_abilities_id",
        ),
        sa.ForeignKeyConstraint(
            ["provider_extension_id"],
            ["provider_extensions.id"],
            name="fk_providerextensionability_provider_extensions_id",
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="A ProviderExtensionAbility represents a ProviderExtension and Ability combination. This allows for a provider to provide partial functionality to an extension, for example SendGrid only provides sending email, but not an inbox.",
    )
    op.create_table(
        "provider_instance_settings",
        sa.Column("key", sa.Text(), nullable=False),
        sa.Column("value", sa.Text(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("provider_instance_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["provider_instance_id"],
            ["provider_instances.id"],
            name="fk_providerinstancesetting_provider_instances_id",
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="A ProviderInstanceSetting represents a non-default configuration setting for a User or Team's instance of an Provider.",
    )
    op.create_table(
        "provider_instance_usage",
        sa.Column("input_tokens", sa.Integer(), nullable=True),
        sa.Column("output_tokens", sa.Integer(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.Column("team_id", sa.String(), nullable=True),
        sa.Column("provider_instance_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["provider_instance_id"],
            ["provider_instances.id"],
            name="fk_providerinstanceusage_provider_instances_id",
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name="fk_providerinstanceusage_teams_id"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_providerinstanceusage_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="A ProviderInstanceUsage represents a User's usage of a provider. If team_id is also populated, it was used on behalf of a team by a user. Lack of a record means a user has never used the ProviderInstance. Note that ProviderInstances lower on a rotation may be seldom/never used.",
    )
    op.create_table(
        "rate_limit_policies",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("resource_pattern", sa.String(), nullable=False),
        sa.Column("window_seconds", sa.Integer(), nullable=False),
        sa.Column("max_requests", sa.Integer(), nullable=False),
        sa.Column("scope", sa.String(), nullable=True),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.Column("role_id", sa.String(), nullable=True),
        sa.Column("team_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"], ["roles.id"], name="fk_ratelimitpolicy_roles_id"
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["teams.id"], name="fk_ratelimitpolicy_teams_id"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_ratelimitpolicy_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "rotation_provider_instances",
        sa.Column("rotation_id", sa.String(), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("parent_id", sa.String(), nullable=True),
        sa.Column("provider_instance_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["rotation_provider_instances.id"],
        ),
        sa.ForeignKeyConstraint(
            ["provider_instance_id"],
            ["provider_instances.id"],
            name="fk_rotationproviderinstance_provider_instances_id",
        ),
        sa.ForeignKeyConstraint(
            ["rotation_id"],
            ["rotations.id"],
            name="fk_rotationproviderinstance_rotations_id",
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="A RotationProviderInstance represents a link between a Rotation and a ProviderInstance. Order is determined by record parentage (NULL parent is first).",
    )
    with op.batch_alter_table("rotation_provider_instances", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_rotation_provider_instances_parent_id"),
            ["parent_id"],
            unique=False,
        )

    op.create_table(
        "user_teams",
        sa.Column(
            "enabled",
            sa.Boolean(),
            nullable=True,
            comment="Whether this user-team link is currently active",
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(),
            nullable=True,
            comment="When this user-team link expires; null for no expiry",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("team_id", sa.String(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["role_id"], ["roles.id"], name="fk_userteam_roles_id"),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], name="fk_userteam_teams_id"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="fk_userteam_users_id"),
        sa.PrimaryKeyConstraint("id"),
        comment="Junction table linking users to teams with assigned roles",
    )
    op.create_table(
        "invitation_invitees",
        sa.Column(
            "email", sa.String(), nullable=False, comment="Email address of the invitee"
        ),
        sa.Column(
            "is_accepted",
            sa.Boolean(),
            nullable=True,
            comment="Whether the invitation has been accepted",
        ),
        sa.Column(
            "accepted_at",
            sa.DateTime(),
            nullable=True,
            comment="When the invitation was accepted",
        ),
        sa.Column(
            "invitation_id",
            sa.String(),
            nullable=False,
            comment="Reference to the invitation sent to this invitee",
        ),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["invitation_id"],
            ["invitations.id"],
            name="fk_invitationinvitee_invitations_id",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="fk_invitationinvitee_users_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="Tracks specific individuals invited to join a team",
    )
    op.create_table(
        "provider_instance_extension_abilities",
        sa.Column("provider_extension_ability_id", sa.String(), nullable=False),
        sa.Column("state", sa.Boolean(), nullable=False),
        sa.Column("forced", sa.Boolean(), nullable=False),
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("created_by_user_id", sa.String(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("updated_by_user_id", sa.String(), nullable=True),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.Column("deleted_by_user_id", sa.String(), nullable=True),
        sa.Column("provider_instance_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["provider_extension_ability_id"],
            ["provider_extension_abilities.id"],
            name="fk_providerinstanceextensionability_provider_extension_abilities_id",
        ),
        sa.ForeignKeyConstraint(
            ["provider_instance_id"],
            ["provider_instances.id"],
            name="fk_providerinstanceextensionability_provider_instances_id",
        ),
        sa.PrimaryKeyConstraint("id"),
        comment="A ProviderInstanceExtensionAbility represents whether an ability is enabled for that ProviderInstance. Forced abilities are always enabled downstream (Companies can force all Users and their Agents within Team Scope to use them, and Users can force their own Agents to use them). Nonpresence of a record is equivalent to state=False, forced=False.",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("provider_instance_extension_abilities")
    op.drop_table("invitation_invitees")
    op.drop_table("user_teams")
    with op.batch_alter_table("rotation_provider_instances", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_rotation_provider_instances_parent_id"))

    op.drop_table("rotation_provider_instances")
    op.drop_table("rate_limit_policies")
    op.drop_table("provider_instance_usage")
    op.drop_table("provider_instance_settings")
    op.drop_table("provider_extension_abilities")
    op.drop_table("permissions")
    op.drop_table("invitations")
    op.drop_table("user_recovery_questions")
    op.drop_table("user_metadata")
    op.drop_table("user_credentials")
    op.drop_table("team_metadata")
    op.drop_table("rotations")
    with op.batch_alter_table("roles", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_roles_parent_id"))

    op.drop_table("roles")
    op.drop_table("provider_instances")
    op.drop_table("provider_extensions")
    op.drop_table("failed_login_attempts")
    op.drop_table("auth_sessions")
    op.drop_table("abilities")
    op.drop_table("users")
    with op.batch_alter_table("teams", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_teams_parent_id"))

    op.drop_table("teams")
    op.drop_table("providers")
    op.drop_table("extensions")
    # ### end Alembic commands ###
