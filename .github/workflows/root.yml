name: CI Workflow

on:
  # Run on pull_request events
  pull_request:
    branches: [main, dev]
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "**.md"
      - "docs/**"
  # Only run on push events when NOT associated with a pull request
  push:
    paths-ignore:
      - "**.md"
      - "docs/**"

jobs:
  check-duplicate-trigger:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check if this is a duplicate run
        id: check
        run: |
          # Always run for pull_request events
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Running for pull_request event"
            exit 0
          fi

          # For push events, check if there's an open PR for this branch
          # Skip if this is a push to a branch with an open PR
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Extract branch name from ref
            BRANCH=${GITHUB_REF#refs/heads/}
            
            # Don't run for pushes to main or dev branches (these should be PR-based)
            if [[ "$BRANCH" == "main" || "$BRANCH" == "dev" ]]; then
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "Skipping run for push to protected branch: $BRANCH"
              exit 0
            fi
            
            # Check for open PRs from this branch to main or dev
            OPEN_PRS=$(curl -s -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:$BRANCH&state=open" | \
              jq length)
            
            if [[ "$OPEN_PRS" -gt 0 ]]; then
              echo "should_run=false" >> $GITHUB_OUTPUT
              echo "Skipping run for push to branch with open PR: $BRANCH"
            else
              echo "should_run=true" >> $GITHUB_OUTPUT
              echo "Running for push event to branch without open PR: $BRANCH"
            fi
          fi

  # New job to enforce that only PRs from dev can target main
  enforce-branch-policy:
    needs: check-duplicate-trigger
    if: needs.check-duplicate-trigger.outputs.should_run == 'true' && github.event_name == 'pull_request' && github.base_ref == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR is from dev branch
        run: |
          if [[ "${{ github.head_ref }}" != "dev" ]]; then
            echo "::error::Pull requests to main branch must come from dev branch only! Your PR is from ${{ github.head_ref }}."
            echo "::error::Please target dev branch with this PR, or create a new PR from dev to main."
            exit 1
          fi
          echo "âœ… PR is correctly from dev to main"

  determine-workflow:
    needs: [check-duplicate-trigger, enforce-branch-policy]
    if: |
      needs.check-duplicate-trigger.outputs.should_run == 'true' && 
      (github.event_name != 'pull_request' || github.base_ref != 'main' || 
       (github.base_ref == 'main' && github.head_ref == 'dev'))
    runs-on: ubuntu-latest
    outputs:
      run_lint: ${{ steps.check-event.outputs.run_lint }}
      run_tests: ${{ steps.check-event.outputs.run_tests }}
      run_downstream: ${{ steps.check-event.outputs.run_downstream }}
      is_from_dev: ${{ steps.check-event.outputs.is_from_dev }}
    steps:
      - name: Check event type
        id: check-event
        run: |
          # Always run lint
          echo "run_lint=true" >> $GITHUB_OUTPUT

          # Run tests on pull requests to main or dev
          if [[ "${{ github.event_name }}" == "pull_request" && ("${{ github.base_ref }}" == "main" || "${{ github.base_ref }}" == "dev") ]]; then
            echo "run_tests=true" >> $GITHUB_OUTPUT
          else
            echo "run_tests=false" >> $GITHUB_OUTPUT
          fi

          # Check if PR is from dev to main
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" == "dev" ]]; then
            echo "run_downstream=true" >> $GITHUB_OUTPUT
            echo "is_from_dev=true" >> $GITHUB_OUTPUT
          else
            echo "run_downstream=false" >> $GITHUB_OUTPUT
            echo "is_from_dev=false" >> $GITHUB_OUTPUT
          fi

  lint:
    needs: determine-workflow
    if: needs.determine-workflow.outputs.run_lint == 'true'
    uses: ./.github/workflows/lint.yml

  test:
    needs: [determine-workflow, lint]
    if: needs.determine-workflow.outputs.run_tests == 'true'
    uses: ./.github/workflows/test-pytest-compare.yml

  stage-downstream:
    needs: [determine-workflow, test]
    if: needs.determine-workflow.outputs.run_downstream == 'true'
    uses: ./.github/workflows/stage-downstream.yml
    with:
      is_from_dev: ${{ needs.determine-workflow.outputs.is_from_dev == 'true' }}
    secrets:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      DOWNSTREAM_REPOSITORIES: ${{ secrets.DOWNSTREAM_REPOSITORIES }}
