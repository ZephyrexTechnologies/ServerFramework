name: Stage Downstream Repositories

on:
  workflow_call:
    inputs:
      is_from_dev:
        required: true
        type: boolean
    secrets:
      PAT_TOKEN:
        required: true
      DOWNSTREAM_REPOSITORIES:
        required: true

jobs:
  stage-downstream:
    if: inputs.is_from_dev
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "actions-user"
          git config --global user.email "actions-user@users.noreply.github.com"

      - name: Parse downstream repositories
        id: parse_repos
        run: |
          echo "REPOS=$(echo ${{ secrets.DOWNSTREAM_REPOSITORIES }} | tr ',' ' ')" >> $GITHUB_ENV

      - name: Create or update downstream pull requests
        id: create_prs
        run: |
          # Arrays to store PR information
          PR_DATA=()

          for REPO in $REPOS; do
            echo "Processing downstream repository: $REPO"
            
            # Clone the downstream repository using PAT_TOKEN
            git clone https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/$REPO.git downstream_repo
            cd downstream_repo
            
            # Check if dev branch exists in downstream repository
            if git ls-remote --heads origin dev | grep -q dev; then
              git checkout dev
            else
              # Create dev branch if it doesn't exist
              git checkout -b dev
            fi
            
            # Get the current repository name from the environment
            CURRENT_REPO="${{ github.repository }}"
            
            # Add the current repository as a remote
            git remote add source https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/$CURRENT_REPO.git
            git fetch source dev
            
            # Try to merge the dev branch from the current repository
            if git merge source/dev -m "Merge $CURRENT_REPO dev branch into $REPO dev branch"; then
              # Push the changes to the downstream repository
              git push origin dev
              
              # Check if a PR already exists
              EXISTING_PR=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$REPO/pulls?head=$(echo $REPO | cut -d'/' -f1):dev&base=main&state=open")
              
              # If PR exists, use it, otherwise create a new one
              if [[ $(echo $EXISTING_PR | jq '. | length') -gt 0 ]]; then
                PR_URL=$(echo $EXISTING_PR | jq -r '.[0].html_url')
                PR_NUMBER=$(echo $EXISTING_PR | jq -r '.[0].number')
                echo "Found existing PR in $REPO: $PR_URL"
              else
                # Create a new pull request
                PR_TITLE="Downstream merge from $CURRENT_REPO"
                PR_BODY="This PR was automatically created by the stage-downstream workflow in $CURRENT_REPO. It merges changes from the dev branch of $CURRENT_REPO into the main branch of $REPO."
                
                PR_RESPONSE=$(curl -X POST \
                  -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/$REPO/pulls \
                  -d "{\"title\":\"$PR_TITLE\",\"body\":\"$PR_BODY\",\"head\":\"dev\",\"base\":\"main\"}")
                
                PR_URL=$(echo $PR_RESPONSE | jq -r .html_url)
                PR_NUMBER=$(echo $PR_RESPONSE | jq -r .number)
                
                if [[ "$PR_URL" == "null" ]]; then
                  echo "Failed to create PR in $REPO. Response: $PR_RESPONSE"
                  exit 1
                fi
                echo "Created new PR in $REPO: $PR_URL"
              fi
              
              # Save PR data in a format we can parse later
              PR_DATA+=("$REPO:$PR_NUMBER:$PR_URL")
            else
              echo "Failed to merge $CURRENT_REPO/dev into $REPO/dev"
              exit 1
            fi
            
            cd ..
            rm -rf downstream_repo
          done

          # Save the PR data to a file that can be passed to the next job
          echo "${PR_DATA[*]}" > pr_data.txt

          # Debug output
          echo "Created/updated PRs: ${PR_DATA[*]}"

      - name: Upload PR data
        uses: actions/upload-artifact@v4
        with:
          name: pr-data
          path: pr_data.txt
          retention-days: 1

  check-downstream-prs:
    needs: stage-downstream
    runs-on: ubuntu-latest
    steps:
      - name: Download PR data
        uses: actions/download-artifact@v4
        with:
          name: pr-data

      - name: Check downstream pull request status
        run: |
          # Read PR data from file
          PR_DATA=$(cat pr_data.txt)

          echo "PR Data: $PR_DATA"

          # Parse PR data
          if [[ -z "$PR_DATA" ]]; then
            echo "::error::No pull requests found to check"
            exit 1
          fi

          # Create arrays to store failed PRs for comprehensive reporting
          FAILED_PRS=()
          INCOMPLETE_CHECKS_PRS=()
          UNMERGEABLE_PRS=()

          # Initialization for waiting logic
          MAX_RETRIES=30             # Maximum number of polling attempts
          POLLING_INTERVAL=30        # Wait time between polls in seconds

          # Loop through each PR entry
          for PR_ENTRY in $PR_DATA; do
            # Split by colon
            IFS=':' read -r REPO PR_NUMBER PR_URL <<< "$PR_ENTRY"
            
            echo "Checking status of PR #$PR_NUMBER in repository $REPO"
            
            # Initialize flags
            ALL_CHECKS_COMPLETED=false
            FOUND_FAILURE=false
            RETRY_COUNT=0
            
            # First check if PR is mergeable - quick fail if not
            PR_STATUS=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO/pulls/$PR_NUMBER)
            
            MERGEABLE=$(echo $PR_STATUS | jq -r '.mergeable // "unknown"')
            MERGEABLE_STATE=$(echo $PR_STATUS | jq -r '.mergeable_state // "unknown"')
            
            # If PR is clearly unmergeable, fail fast
            if [ "$MERGEABLE" = "false" ]; then
              echo "::error::PR #$PR_NUMBER in repository $REPO is not mergeable (state: $MERGEABLE_STATE)"
              UNMERGEABLE_PRS+=("$REPO:$PR_NUMBER")
              continue
            fi
            
            # Begin polling loop
            while [ "$ALL_CHECKS_COMPLETED" = "false" ] && [ "$FOUND_FAILURE" = "false" ] && [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Polling attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
              
              # Get the PR head SHA
              PR_SHA=$(echo $PR_STATUS | jq -r .head.sha)

              # Get check runs for the PR
              PR_CHECKS=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/$REPO/commits/$PR_SHA/check-runs)

              # If API request failed (e.g., rate limit), wait and retry
              if [ -z "$PR_CHECKS" ] || [[ "$PR_CHECKS" == *"API rate limit exceeded"* ]]; then
                echo "API request failed or rate limited. Waiting before retry."
                sleep $POLLING_INTERVAL
                RETRY_COUNT=$((RETRY_COUNT + 1))
                continue
              fi
              
              # Get check and status counts
              TOTAL_CHECKS=$(echo $PR_CHECKS | jq '.total_count')
              
              # If no checks are running, consider it complete after some time
              if [ "$TOTAL_CHECKS" -eq 0 ]; then
                if [ $RETRY_COUNT -gt 3 ]; then
                  echo "No checks are running for this PR. Assuming it's ready to proceed."
                  ALL_CHECKS_COMPLETED=true
                else
                  echo "No checks detected yet. Waiting for checks to start..."
                  sleep $POLLING_INTERVAL
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  continue
                fi
              else
                # Check if there are any failed checks (FAIL FAST!)
                FAILED_CHECKS=$(echo $PR_CHECKS | jq '[.check_runs[] | select(.conclusion == "failure" or .conclusion == "cancelled" or .conclusion == "timed_out")] | length')
                
                if [ "$FAILED_CHECKS" -gt 0 ]; then
                  echo "::error::Found $FAILED_CHECKS failed checks in PR #$PR_NUMBER in $REPO - failing fast!"
                  FAILED_PRS+=("$REPO:$PR_NUMBER")
                  FOUND_FAILURE=true
                  break
                fi
                
                # Check completion status
                COMPLETED_CHECKS=$(echo $PR_CHECKS | jq '[.check_runs[] | select(.status == "completed")] | length')
                PENDING_CHECKS=$((TOTAL_CHECKS - COMPLETED_CHECKS))
                
                echo "Total checks: $TOTAL_CHECKS"
                echo "Completed checks: $COMPLETED_CHECKS"
                echo "Pending checks: $PENDING_CHECKS"
                
                if [ "$PENDING_CHECKS" -eq 0 ]; then
                  echo "All checks have completed for PR #$PR_NUMBER in $REPO."
                  ALL_CHECKS_COMPLETED=true
                else
                  echo "Waiting for $PENDING_CHECKS checks to complete. Polling again in $POLLING_INTERVAL seconds..."
                  sleep $POLLING_INTERVAL
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                fi
              fi
            done
            
            # Check outcomes based on how we exited the polling loop
            if [ "$FOUND_FAILURE" = "true" ]; then
              # We already added this PR to FAILED_PRS and broke out early - continue to next PR
              continue
            fi
            
            if [ "$ALL_CHECKS_COMPLETED" = "false" ]; then
              echo "::warning::Checks did not complete within the maximum wait time for PR #$PR_NUMBER in $REPO"
              INCOMPLETE_CHECKS_PRS+=("$REPO:$PR_NUMBER")
              continue
            fi
            
            # Now that checks are completed without failures, verify final status
            if [ "$TOTAL_CHECKS" -gt 0 ]; then
              # Double-check for any non-success status (other than neutral)
              ALL_CHECKS_PASSED=$(echo $PR_CHECKS | jq '[.check_runs[] | select(.conclusion != "success" and .conclusion != "neutral")] | length')
              
              if [ "$ALL_CHECKS_PASSED" -gt 0 ]; then
                echo "::warning::PR #$PR_NUMBER in repository $REPO has unsuccessful checks"
                FAILED_PRS+=("$REPO:$PR_NUMBER")
                continue
              fi
            fi
            
            # Final check for mergeability - it might have changed during checks
            PR_STATUS=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$REPO/pulls/$PR_NUMBER)
            
            MERGEABLE=$(echo $PR_STATUS | jq -r '.mergeable // "unknown"')
            MERGEABLE_STATE=$(echo $PR_STATUS | jq -r '.mergeable_state // "unknown"')
            
            echo "Mergeable: $MERGEABLE"
            echo "Mergeable state: $MERGEABLE_STATE"
            
            if [ "$MERGEABLE" = "false" ] || [ "$MERGEABLE_STATE" = "dirty" ] || [ "$MERGEABLE_STATE" = "blocked" ]; then
              echo "::warning::PR #$PR_NUMBER in repository $REPO is not mergeable (state: $MERGEABLE_STATE)"
              UNMERGEABLE_PRS+=("$REPO:$PR_NUMBER")
              continue
            fi
            
            echo "✅ PR #$PR_NUMBER in repository $REPO is passing all checks and ready to merge!"
          done

          # Comprehensive failure report
          FAILURE=false

          if [ ${#FAILED_PRS[@]} -gt 0 ]; then
            echo "::error::The following PRs have failed checks:"
            for PR in "${FAILED_PRS[@]}"; do
              echo "  - $PR"
            done
            FAILURE=true
          fi

          if [ ${#INCOMPLETE_CHECKS_PRS[@]} -gt 0 ]; then
            echo "::error::The following PRs have incomplete checks:"
            for PR in "${INCOMPLETE_CHECKS_PRS[@]}"; do
              echo "  - $PR"
            done
            FAILURE=true
          fi

          if [ ${#UNMERGEABLE_PRS[@]} -gt 0 ]; then
            echo "::error::The following PRs are not mergeable:"
            for PR in "${UNMERGEABLE_PRS[@]}"; do
              echo "  - $PR"
            done
            FAILURE=true
          fi

          if [ "$FAILURE" = "true" ]; then
            echo "::error::Some downstream pull requests have issues. See details above."
            exit 1
          else
            echo "All downstream pull requests are passing and mergeable!"
          fi
